# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oPtccyY2xrvKy82AcN3AsrKbUHa9V_UA
"""

import pandas as pd
import requests
import json
import datetime as dt
import pyrebase

params_boxscore= {
    "Season": "2022-23",
    "DateFrom": "",
    "DateTo": ""
}

config = {
    "apiKey": "",
    "authDomain": "",
    "databaseURL": "https://nbascrapingdaily-default-rtdb.europe-west1.firebasedatabase.app/",
    "projectId": "nbascrapingdaily",
    "storageBucket": "",
    "messagingSenderId": "",
    "appId": "",
    "measurementId": ""
}
firebase = pyrebase.initialize_app(config)

# Get a reference to the database service
Nba_games = firebase.database()

today = dt.date.today()
today = today.strftime('%m/%d/%Y')

query_params_stats100poss = {
  "Conference":"" ,
  "DateFrom": "",
  "DateTo": "",
  "Division": "",
  "GameScope": "",
  "GameSegment": "",
  "Height": "",
  "LastNGames": "0",
  "LeagueID": "00",
  "Location": "",
  "MeasureType": "Base",
  "Month": "0",
  "OpponentTeamID": "0",
  "Outcome":"" ,
  "PORound": "0",
  "PaceAdjust": "N",
  "PerMode": "Per100Possessions",
  "Period": "0",
  "PlayerExperience":"", 
  "PlayerPosition": "",
  "PlusMinus": "N",
  "Rank": "N",
  "Season": "2022-23",
  "SeasonSegment": "",
  "SeasonType": "Regular Season",
  "ShotClockRange": "",
  "StarterBench": "",
  "TeamID": "0",
  "TwoWay": "0",
  "VsConference":"", 
  "VsDivision": ""
}

query_params_advanced = {
  "Conference":"" ,
  "DateFrom": "",
  "DateTo": "",
  "Division": "",
  "GameScope": "",
  "GameSegment": "",
  "Height": "",
  "LastNGames": "0",
  "LeagueID": "00",
  "Location": "",
  "MeasureType": "Advanced",
  "Month": "0",
  "OpponentTeamID": "0",
  "Outcome":"" ,
  "PORound": "0",
  "PaceAdjust": "N",
  "PerMode": "PerGame",
  "Period": "0",
  "PlayerExperience":"", 
  "PlayerPosition": "",
  "PlusMinus": "N",
  "Rank": "N",
  "Season": "2022-23",
  "SeasonSegment": "",
  "SeasonType": "Regular Season",
  "ShotClockRange": "",
  "StarterBench": "",
  "TeamID": "0",
  "TwoWay": "0",
  "VsConference":"", 
  "VsDivision": ""
}

query_params_advanced_5 = {
  "Conference":"" ,
  "DateFrom": "",
  "DateTo": "",
  "Division": "",
  "GameScope": "",
  "GameSegment": "",
  "Height": "",
  "LastNGames": "0",
  "LeagueID": "00",
  "Location": "",
  "MeasureType": "Advanced",
  "Month": "0",
  "OpponentTeamID": "0",
  "Outcome":"" ,
  "PORound": "0",
  "PaceAdjust": "N",
  "PerMode": "PerGame",
  "Period": "0",
  "PlayerExperience":"", 
  "PlayerPosition": "",
  "PlusMinus": "N",
  "Rank": "N",
  "Season": "2022-23",
  "SeasonSegment": "",
  "SeasonType": "Regular Season",
  "ShotClockRange": "",
  "StarterBench": "",
  "TeamID": "0",
  "TwoWay": "0",
  "VsConference":"", 
  "VsDivision": ""
}

query_params_advanced_10 = {
  "Conference":"" ,
  "DateFrom": "",
  "DateTo": "",
  "Division": "",
  "GameScope": "",
  "GameSegment": "",
  "Height": "",
  "LastNGames": "0",
  "LeagueID": "00",
  "Location": "",
  "MeasureType": "Advanced",
  "Month": "0",
  "OpponentTeamID": "0",
  "Outcome":"" ,
  "PORound": "0",
  "PaceAdjust": "N",
  "PerMode": "PerGame",
  "Period": "0",
  "PlayerExperience":"", 
  "PlayerPosition": "",
  "PlusMinus": "N",
  "Rank": "N",
  "Season": "2022-23",
  "SeasonSegment": "",
  "SeasonType": "Regular Season",
  "ShotClockRange": "",
  "StarterBench": "",
  "TeamID": "0",
  "TwoWay": "0",
  "VsConference":"", 
  "VsDivision": ""
}

header_url_boxscore = "https://stats.nba.com/stats/teamgamelogs?"
request_url_advanced = 'https://stats.nba.com/stats/leaguedashteamstats?'
header_url_stats100poss= "https://stats.nba.com/stats/leaguedashteamstats?"

headers = {
    "Accept": "*/*",
    "Accept-Encoding":"gzip, deflate, br",
    "Accept-Language": "it-IT,it;q=0.9",
    "Connection": "keep-alive",
    "Host": "stats.nba.com",
    "If-Modified-Since": "Fri, 23 Sep 2022 17:22:00 GMT",
    "Origin": "https://www.nba.com",
    "Referer": "https://www.nba.com/",
    "sec-ch-ua": '"Google Chrome";v="105", "Not)A;Brand";v="8", "Chromium";v="105"',
    "sec-ch-ua-mobile": "?0",
    "sec-ch-ua-platform": '"Windows"',
    "Sec-Fetch-Dest": "empty",
    "Sec-Fetch-Mode": "cors",
    "Sec-Fetch-Site": "same-site",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36",
}

def Get_data(url, header, params):
  response = requests.get(url, headers=header, params=params)
  file = response.json()
  file = json.dumps(file['resultSets'],indent=4)
  data = json.loads(file[1:-1])
  columns = [dct for dct in data['headers']]
  df = pd.DataFrame(data['rowSet'], columns=columns)
  df['TEAM_ID' ] = df['TEAM_ID'].astype('str')
  return df

def params_updater(today):
  update_today = { "DateTo": today, "DateFrom": today} 
  params_boxscore.update(update_today)
  query_params_advanced.update(update_today)
  query_params_advanced_5.update(update_today)
  query_params_advanced_10.update(update_today)
  query_params_stats100poss.update(update_today)

def stats_scraper():
  df = Get_data(header_url_boxscore, headers, params=params_boxscore)

  df_home = df[df['MATCHUP'].str.contains('@') == False]
  df_away = df[df['MATCHUP'].str.contains('@') == True]

  df_home = df_home[['SEASON_YEAR','TEAM_ID','GAME_ID','GAME_DATE','PTS']]
  df_away = df_away[['SEASON_YEAR','TEAM_ID','GAME_ID','GAME_DATE','PTS']]

  boxscores = pd.merge(df_home, df_away, on=['GAME_ID','SEASON_YEAR','GAME_DATE'], suffixes=("_home","_away"))

  boxscores['TOTAL_PTS'] = boxscores['PTS_home'] +boxscores['PTS_away']
  boxscores['GAME_DATE'] = pd.to_datetime(boxscores['GAME_DATE'])

  df_stats100poss = Get_data(header_url_stats100poss, headers, params=query_params_stats100poss)

  df_stats100poss = df_stats100poss[['TEAM_ID', 'FGM', 'FGA', 'FG_PCT', 'FG3M', 'FG3A', 
                  'FG3_PCT', 'FTM', 'FTA', 'FT_PCT', 'OREB','DREB', 
                  'REB', 'AST', 'TOV', 'STL', 'BLK', 'BLKA', 'PF', 
                  'PFD', 'PTS']] # Select columns to keep

  stats_home = df_stats100poss.add_suffix('_home')
  stats_away = df_stats100poss.add_suffix('_away')

  df = pd.merge(boxscores, stats_home, on="TEAM_ID_home", how="left", suffixes=('', '_100poss'))
  df = pd.merge(df, stats_away, on="TEAM_ID_away", how="left", suffixes=('', '_100poss'))


  columns_advanced = ['TEAM_ID', 'E_OFF_RATING', 'OFF_RATING', 'E_DEF_RATING', 'DEF_RATING', 'E_NET_RATING', 
                  'NET_RATING', 'AST_PCT', 'AST_TO', 'AST_RATIO', 'OREB_PCT', 'DREB_PCT','REB_PCT', 'TM_TOV_PCT', 
                  'EFG_PCT', 'TS_PCT', 'E_PACE', 'PACE', 'PACE_PER40', 'POSS', 'PIE']

  advanced_stats = Get_data(request_url_advanced, headers, query_params_advanced_5)
  advanced_stats = advanced_stats[columns_advanced]

  advanced_stats_home = advanced_stats.add_suffix('_home')
  advanced_stats_away = advanced_stats.add_suffix('_away')

  df = pd.merge(df, advanced_stats_home, on="TEAM_ID_home", how="left")
  df = pd.merge(df, advanced_stats_away, on="TEAM_ID_away", how="left")

  advanced_stats_last5 = Get_data(request_url_advanced, headers, query_params_advanced_5)
  advanced_stats_last10 = Get_data(request_url_advanced, headers, query_params_advanced_10)

  advanced_stats_last5 = advanced_stats_last5[columns_advanced]

  advanced_stats_last10 = advanced_stats_last10[columns_advanced]

  advanced_stats_last5_home = advanced_stats_last5.add_suffix('_last5_home')
  advanced_stats_last5_away = advanced_stats_last5.add_suffix('_last5_away')

  advanced_stats_last10_home = advanced_stats_last10.add_suffix('_last10_home')
  advanced_stats_last10_away = advanced_stats_last10.add_suffix('_last10_away')

  df = pd.merge(df, advanced_stats_last10_away, left_on="TEAM_ID_away",right_on="TEAM_ID_last10_away", how="left")
  df = pd.merge(df, advanced_stats_last10_home, left_on="TEAM_ID_home",right_on="TEAM_ID_last10_home", how="left")
  df = pd.merge(df, advanced_stats_last5_away, left_on="TEAM_ID_away",right_on="TEAM_ID_last5_away", how="left")
  df = pd.merge(df, advanced_stats_last5_home, left_on="TEAM_ID_home",right_on="TEAM_ID_last5_home", how="left")
  
  df = df.to_json()
  index = dt.today()
  index = index.strftime("%d-%m-%Y")
  Nba_games.child(index).set(df)



def scheduler():
    now = dt.now()
    current_time = now.strftime("%H:%M:%S")
    # Trigger scraper function everyday on 12 AM
    if current_time == "12:00:00":   
        stats_scraper()

scheduler()
